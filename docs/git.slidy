= Git
Stephen Blott <stephen.blott@dcu.ie>
:data-uri:
:stylesheet: /home/blott/.asciidoc/themes/smblott/smblott-extra.css

// //////////////////////////////////////////////////////////////
== Information and Links

.Information
****
- Boot into the Linux desktop.
- Username: +socguest+
- Password: +computing+
****

.Links
****
- These slides: http://smblott.org/git.html[].
- Test project: https://github.com/smblott-github/test-project-addition[].
- Cheat sheet: https://github.com/smblott-github/test-project-addition/blob/master/docs/cheat-sheet.md[].
****

****
*You will need a Github account.*
****

// //////////////////////////////////////////////////////////////
== Plan

****
- Me talky, talky for circa 45 minutes (incl. demo).
- Then we try git for ourselves.
****

// //////////////////////////////////////////////////////////////
== Software Projects

****
Most software projects consist of a (possibly large) collection of files, usually text files.
****

****
For example, the source code for the Python interpreter consists of a collection of almost _four thousand_  files.

(Correct: October 2016.)
****

// //////////////////////////////////////////////////////////////
== Software Projects

****
Most software is written by _many_ contributors.
****

****
For example, the Python interpreter has hundreds of contributors.
****

// //////////////////////////////////////////////////////////////
== Software Projects

****
At any point in time, developers will be working on many different features.
****

****
For example:

- some new user-interface bling
- or a networking issue
- or a bug in a database
- and so on.
****

// //////////////////////////////////////////////////////////////
== Some Potential Problems

.Copying change sets
****
When one contributor makes a set of changes,
we need a mechanism for copying those changes to other developers.
****

// //////////////////////////////////////////////////////////////
== Some Potential Problems

.Atomic change sets
****
If a change set involves _several changes to different files_, then we should always see the state either _before_ all of the changes, or _after_ all of the changes.
****

****
We should never see a set of files with the changes having been made in some files but not in others.

That just wouldn't work!
****

// //////////////////////////////////////////////////////////////
== Some Potential Problems

.Merging change sets
****
When two developers make _different_ changes to the _same file_,
we need a mechanism for _merging those changes_, ideally automatically.
****

// //////////////////////////////////////////////////////////////
== Some Potential Problems

.Multiple versions
****
Developers work on different features at the same time; for example, some
new user-interface bling, optimisation of some network protocol and fixing
a database bug.
****

****
It should be possible to work on _different versions_ of the code base, when working on each such feature.

The changes in a version of the code base are merged (atomically) only when they are ready.
****

// //////////////////////////////////////////////////////////////
== Git

****
Git is a _source code control system_ and a _version control system_.
****

****
Git is a set of tools for managing a (possibly large) set files.

It provides features for solving all of the previous problems (and more).
****

// //////////////////////////////////////////////////////////////
== Git

****
Git can be used to manage:

- private/proprietary/commercial software projects
- open-source software projects
- or just your own files +
  (for example, your own Linux configuration files and scripts)
****

// //////////////////////////////////////////////////////////////
== Git

****
Git can be used to manage:

- private/proprietary/commercial software projects
- open-source software projects
- or just your own files +
  (for example, the scripts your write in this module)
****

****
All of my lecture material lives in git.

That includes my Einstein markers, my slides, the lab sheets, the web
site (and more) -- if you know my modules.
****

// //////////////////////////////////////////////////////////////
== Git-Based Web sites

****
For open source projects, there are web sites like https://github.com/[Github]
and https://bitbucket.org/[Bitbucket] which provide free hosting of Git repositories (and more).
****

****
For School of Computing students, we host a https://gitlab.computing.dcu.ie/[Gitlab] instance.

(All students at the School of Computing already have an account on Gitlab.
Just use the credentials which you use in the labs.)
****

// //////////////////////////////////////////////////////////////
== Repositories

****
In git terminology, the collection of files (and all versions of that collection of files) is known as a _repository_.

(Or "_repo_", for short.)
****

// //////////////////////////////////////////////////////////////
== Demo

****
This is not a full tutorial on git (that would take too long).

This is a demo of the most-important, basic features of git.
****

// //////////////////////////////////////////////////////////////
== Demo

****
1. Look at https://github.com/smblott-github/test-project-addition[Github].
2. Clone the `test-project-addition` repo.
****

// //////////////////////////////////////////////////////////////
== Demo

****
1. Look at https://github.com/smblott-github/test-project-addition[Github].
2. Clone the `test-project-addition` repo.
****

[source, sh]
----
git clone git@github.com:smblott-github/test-project-addition.git
----

// //////////////////////////////////////////////////////////////
== Demo

****
1. Look at https://github.com/smblott-github/test-project-addition[Github].
2. Clone the `test-project-addition` repo.
****

****
We now have a local copy of all of the repo's files.
****

// //////////////////////////////////////////////////////////////
== Demo

****
Tell git who we are.
****

[source, sh]
----
cd test-project-addition

git config user.name "YOUR NAME REAL NAME"
git config user.email YOUR_EMAIL_ADDRESS

git config credential.helper cache
----

// //////////////////////////////////////////////////////////////
== Demo

****
Tell git your preferred text editor.

Choose *one* of...
****

[source, sh]
----
git config core.editor "gedit -s"
git config core.editor "subl -n -s"
git config core.editor "sublime_text -n -s"
git config core.editor "mate -w"
git config core.editor "gvim -f"
git config core.editor "vim"
----

// //////////////////////////////////////////////////////////////
== Demo

****
Do *not* do this...
****

[source, sh]
----
git config --global core.editor gedit
----

****
The editor you use must *block* the calling process until it exits.
****

// //////////////////////////////////////////////////////////////
== Demo

****
We only have to do the previous steps once per repo.
****

// //////////////////////////////////////////////////////////////
== Demo

****
1. Clone repo on +smblott+ (in office).
1. Clone repo on +fouly+ (at home).
****

// //////////////////////////////////////////////////////////////
== Demo

****
Now, what does this project do?

Not a lot:

- it implements programs to add up the command-line arguments in various programming languages
****

[source, sh]
.Try:
----
make

make test
----

// //////////////////////////////////////////////////////////////
== Demo

****
1. Create a Python 2 implementation.
2. Tell git that we want it to track our new file.
3. Add a test.
4. Commit.
****

// //////////////////////////////////////////////////////////////
== Demo

****
Create a Python 2 implementation.
****

[source, python]
.add-python2.py:
----
import sys

total = 0
for s in sys.argv[1:]:
   total += int(s)

print total
----

// //////////////////////////////////////////////////////////////
== Demo

****
Tell git that we want it to track our new file.
****

[source, sh]
----
git add add-python2.py
----

// //////////////////////////////////////////////////////////////
== Demo

****
Add a test.
****

// //////////////////////////////////////////////////////////////
== Demo

****
Commit.
****

[source, sh]
----
git commit -a -m "Add new Python 2 implementation."
----

// //////////////////////////////////////////////////////////////
== Demo

****
Push changes.
****

****
This step copies the new file (technically, the _change set_) to Github.
****

// //////////////////////////////////////////////////////////////
== Demo

****
Push changes.
****

[source, sh]
.Usually:
----
git push
----

[source, sh]
.The first time (sometimes):
----
git push -u origin master
----

// //////////////////////////////////////////////////////////////
== Demo

****
1. Pull repo on +smblott+ (in office).
1. Pull repo on +fouly+ (at home).
****

[source, sh]
----
git pull
----

// //////////////////////////////////////////////////////////////
== Demo

****
1. Pull repo on +smblott+ (in office).
1. Pull repo on +fouly+ (at home).
****

.Observe
****
The new files have been copied to those locations too.
****

// //////////////////////////////////////////////////////////////
== Demo


[source, sh]
.Workflow:
----
git pull                   # Pull any remote updates.

# Make changes (edit files, create new files).

git add FILENAME           # For any new files.

git commit -a -m "Message" # Commit.

git push                   # Push changes.
----

// //////////////////////////////////////////////////////////////
== Demo

****
Commits bundle up the changes to one *or more* files into a single change set.

The changes are atomic.

It is not possible to have the change applied in one file but not in another.
****

// //////////////////////////////////////////////////////////////
== Demo

****
Files which are automatically generated should not be tracked.
****

----
add
Java.class
----

// //////////////////////////////////////////////////////////////
== Demo

****
Files which are automatically generated should not be tracked.
****

[source, sh]
----
git status
----

// //////////////////////////////////////////////////////////////
== Demo

****
Files which are automatically generated should not be tracked.
****

----
Untracked files:
  (use "git add <file>..." to include in what will be committed)

        Add.class
        add
----

// //////////////////////////////////////////////////////////////
== Demo

****
Files matching patterns in any file called +.gitignore+ are ignored by +git+.
****

// //////////////////////////////////////////////////////////////
== Demo

****
Files matching patterns in any file called +.gitignore+ are ignored by +git+.
****

.+.gitignore+:
----
add
*.class
----

// //////////////////////////////////////////////////////////////
== Demo

****
Files matching patterns in any file called +.gitignore+ are ignored by +git+.
****

.+.gitignore+:
----
add
*.class
----

[source, sh]
----
git add .gitignore
git commit -a -m "Add .gitignore."
git push
----

// //////////////////////////////////////////////////////////////
== Demo

****
Next, we will demo working with _different versions_ of the files.
****

// //////////////////////////////////////////////////////////////
== Demo

****
1. Create a new branch +restructure-tests+.
2. Move the tests to a separate script and directory.
****

[source, sh]
----
git checkout -b 'restructure-tests'

# Make changes.

git commit -a -m "Move tests scripts."
git push -u origin restructure-tests
----

// //////////////////////////////////////////////////////////////
== Demo

****
We now have _two versions_ of the project:

- +master+ is the main branch
- +restructure-tests+, in which the tests have been moved to a sub-directory.
****

// //////////////////////////////////////////////////////////////
== Demo

****
We can jump back and forward between each branch.
****

[source, sh]
----
git checkout 'master'
ls -l

git checkout 'restructure-tests'
ls -l
----

// //////////////////////////////////////////////////////////////
== Demo

****
We decide we want to ("permanently") accept these changes.
****

// //////////////////////////////////////////////////////////////
== Demo

****
We decide we want to ("permanently") accept these changes.
****

****
We could do this locally...
****

[source, sh]
----
git checkout master
git merge restructure-tests
git push
----

// //////////////////////////////////////////////////////////////
== Demo

****
We decide we want to ("permanently") accept these changes.
****

****
We could do this locally.

But on open-source projects, we may not be the owner of the project.
****

****
In this case, we submit a _pull request_ (PR) on Github.

See https://github.com/smblott-github/test-project-addition[here, again].
****

// //////////////////////////////////////////////////////////////
== Workflow

****
Normally, you _do not work on the_ +master+ _branch_:

- +git pull+ -- to get the most recent version of the code
- create a feature branch
- work on the feature in that branch
- when it's ready, either:
** merge that branch into +master+, or
** submit a PR
****

// //////////////////////////////////////////////////////////////
== Lastly

****
I will remove the Python 2 implementation.

(You can re-write it yourself.)
****

// //////////////////////////////////////////////////////////////
== Aliases

****
Remembering those cryptic +git+ commands can be difficult.
****

****
Unix shells provide a mechanism (_aliases_) for you to use short, memorable
names for more complex commands.
****

****
Less remembering, less typing, fewer typos.
****

// //////////////////////////////////////////////////////////////
== Aliases

[source, sh]
----
alias gc="git commit -a -m"          # Git Commit

alias gco="git checkout"             # Git Check Out

alias gcoo="git checkout --track"    # Git Check Out Old
alias gcon="git checkout -n"         # Git Check Out New
----

// //////////////////////////////////////////////////////////////
== Aliases

[source, sh]
----
alias gc="git commit -a -m"          # Git Commit

alias gco="git checkout"             # Git Check Out

alias gcoo="git checkout --track"    # Git Check Out Old
alias gcon="git checkout -n"         # Git Check Out New
----

[source, sh]
.Then:
----
gc "Cool new feature."               # Git commit (with a suitable commit message)
----

// //////////////////////////////////////////////////////////////
== Aliases and +.bashrc+

****
If a file +.bashrc+ exists in your home directory, then the +bash+ shell reads it in every new shell.
****

****
You can add these aliases to your +.bashrc+, and they will be automatically
available in all new shells.
****

// //////////////////////////////////////////////////////////////
== Getting Git

****
In the School of Computing, git is installed:

- on the Linux machines in the labs
- on the Windows machines in the labs
****

// //////////////////////////////////////////////////////////////
== Getting Git

****
For Linux, probably something like

[source, sh]
----
sudo apt-get install git
----
****

// //////////////////////////////////////////////////////////////
== Getting Git

****
For OS X (Macs):

- google "_installing git on OS X_"
  (the top link looks good)
****

****
For Windows:

- actually, the top link for the Google query above has information for Windows too
- or google "_git for windows_"
****

// //////////////////////////////////////////////////////////////
== Practical Work

****
- Go to https://github.com/smblott-github/test-project-addition[Github].
- _Fork_ the repo.
- Clone _your copy of the repo_.
- Add a new program to add together its command-line arguments in any
  programming language of your choice.
- Submit a PR on Github, and I'll merge the first reasonable PR for each
  programming language.

https://github.com/smblott-github/test-project-addition/blob/master/docs/cheat-sheet.md#cheat-sheet[Cheat sheet].
****

****
- We'll talk about the PR workflow when we get an interesting PR.
- And we'll talk about remotes too.
****

////
//vim: ft=asciidoc
//////
//
